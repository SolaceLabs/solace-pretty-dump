# Topic to ProtoBuf class mapping

# Format is: <topic-to-match> = <class-to-invoke parseFrom(byte[]) on>

# This application uses Solace SMF style topic wildcard matching, and performs topic dispatch per message.
# 
# Use of wildcards allowed:
#   * single-level wildcard, matches 0-or-more characters, up to the next topic level /, can be prefixed
#      e.g. aaa/*/ccc; aaa/b*/ccc; */bb*/*;  will all match topic aaa/bbb/ccc
#      invalid format: a*a;  aaa/*bb/ccc
#   > multi-level wildcard, matches 1-or-more levels, must occur at very end of subscription, cannot be prefixed
#      e.g. aaa/>;  aaa/bbb/>;   >;  will all match topic aaa/bbb/ccc
#      invalid format: aaa/b>;  aaa/>/ccc
#   # borrowed from MQTT, multi-level wildcard, matches 0-or-more levels, must occur at very end of a subscription
#      e.g. aaa/bbb/#;  aaa/bbb/ccc/#;  #;  will all match topic aaa/bbb/ccc
#   


# These two are the Solace broker Distributed Trace / Open Telemetry message formats
# the only way to view these messages is to connect PrettyDump directly to the `#telemetry-...` queue created when
# configuring Distributed Trace within a Message VPN.
# Note the special wildcard char # at the end of the subscription, which will match 0-or-more levels
_telemetry/broker/trace/egress/v1/# = solace.messaging.proto.broker.trace.egress.v1.EgressV1$SpanData
_telemetry/broker/trace/receive/v1/# = solace.messaging.proto.broker.trace.receive.v1.ReceiveV1$SpanData


# Sparkplug B spec: https://sparkplug.eclipse.org/specification/version/2.2/documents/sparkplug-specification-2.2.pdf
# page 12 for topic definition
spBv1.0/> = com.cirruslink.sparkplug.protobuf.SparkplugBProto$Payload


# OpenTelemetry OTLP Protobuf definitions, from snooping the OTel Collector -> backend (e.g. Jaeger) using HTTP Gateway mode
# https://opentelemetry.io/docs/specs/otlp/
# https://github.com/open-telemetry/opentelemetry-proto/blob/main/docs/specification.md
# https://central.sonatype.com/artifact/io.opentelemetry.proto/opentelemetry-proto?smo=true
# Microgatway mode first
POST/v1/traces = io.opentelemetry.proto.trace.v1.TracesData
# REST Messaging mode
v1/traces = io.opentelemetry.proto.trace.v1.TracesData
